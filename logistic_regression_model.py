# -*-coding:utf-8 -*-
from numpy import *
import pandas as pd
from scipy import sparse
from sklearn.preprocessing import OneHotEncoder
from scipy.sparse.csr import csr_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.externals import joblib
import os

def load_data():
    df_train=pd.read_csv('data\\train.csv')
    df_test=pd.read_csv('data\\test.csv')
    return df_train,df_test

def initEncoderList(df_train,df_test):
    EncoderList=[]
    AgeEnc=OneHotEncoder()
    BusinessTravelEnc=OneHotEncoder()
    DepartmentEnc=OneHotEncoder()
    DistanceFromHomeEnc=OneHotEncoder()
    EducationEnc=OneHotEncoder()
    EducationFieldEnc=OneHotEncoder()
    EmployeeNumberEnc=OneHotEncoder()
    EnvironmentSatisfactionEnc=OneHotEncoder()
    GenderEnc=OneHotEncoder()
    JobInvolvementEnc=OneHotEncoder()
    JobLevelEnc=OneHotEncoder()
    JobRoleEnc=OneHotEncoder()
    JobSatisfactionEnc=OneHotEncoder()
    MaritalStatusEnc=OneHotEncoder()
    MonthlyIncomeEnc=OneHotEncoder()
    NumCompaniesWorkedEnc=OneHotEncoder()
    Over18Enc=OneHotEncoder()
    OverTimeEnc=OneHotEncoder()
    PercentSalaryHikeEnc=OneHotEncoder()
    PerformanceRatingEnc=OneHotEncoder()
    RelationshipSatisfactionEnc=OneHotEncoder()
    StandardHoursEnc=OneHotEncoder()
    StockOptionLevelEnc=OneHotEncoder()
    TotalWorkingYearsEnc=OneHotEncoder()
    TrainingTimesLastYearEnc=OneHotEncoder()
    WorkLifeBalanceEnc=OneHotEncoder()
    YearsAtCompanyEnc=OneHotEncoder()
    YearsInCurrentRoleEnc=OneHotEncoder()
    YearsSinceLastPromotionEnc=OneHotEncoder()
    YearsWithCurrManagerEnc=OneHotEncoder()
    AgeDistanceEnc=OneHotEncoder()
    AgeEnvirEnc=OneHotEncoder()
    JobRoleLevelEnc=OneHotEncoder()
    OverPerEnc=OneHotEncoder()
    InvolvementPerEnc=OneHotEncoder()
    StockYearEnc=OneHotEncoder()
    AgeArr=hstack((df_train["Age"].values,df_test["Age"].values)).reshape(-1,1)
    BusinessTravelArr=hstack((df_train["BusinessTravel"].values,df_test["BusinessTravel"].values)).reshape(-1,1)
    DepartmentArr=hstack((df_train["Department"].values,df_test["Department"].values)).reshape(-1,1)
    DistanceFromHomeArr=hstack((df_train["DistanceFromHome"].values,df_test["DistanceFromHome"].values)).reshape(-1,1)
    EducationArr=hstack((df_train["Education"].values,df_test["Education"].values)).reshape(-1,1)
    EducationFieldArr=hstack((df_train["EducationField"].values,df_test["EducationField"].values)).reshape(-1,1)
    EmployeeNumberArr=hstack((df_train["EmployeeNumber"].values,df_test["EmployeeNumber"].values)).reshape(-1,1)
    EnvironmentSatisfactionArr=hstack((df_train["EnvironmentSatisfaction"].values,df_test["EnvironmentSatisfaction"].values)).reshape(-1,1)
    GenderArr=hstack((df_train["Gender"].values,df_test["Gender"].values)).reshape(-1,1)
    JobInvolvementArr=hstack((df_train["JobInvolvement"].values,df_test["JobInvolvement"].values)).reshape(-1,1)
    JobLevelArr=hstack((df_train["JobLevel"].values,df_test["JobLevel"].values)).reshape(-1,1)
    JobRoleArr=hstack((df_train["JobRole"].values,df_test["JobRole"].values)).reshape(-1,1)
    JobSatisfactionArr=hstack((df_train["JobSatisfaction"].values,df_test["JobSatisfaction"].values)).reshape(-1,1)
    MaritalStatusArr=hstack((df_train["MaritalStatus"].values,df_test["MaritalStatus"].values)).reshape(-1,1)
    MonthlyIncomeArr=hstack((df_train["MonthlyIncome"].values,df_test["MonthlyIncome"].values)).reshape(-1,1)
    NumCompaniesWorkedArr=hstack((df_train["NumCompaniesWorked"].values,df_test["NumCompaniesWorked"].values)).reshape(-1,1)
    # Over18Arr=hstack((df_train["Over18"].values,df_test["Over18"].values)).reshape(-1,1)
    OverTimeArr=hstack((df_train["OverTime"].values,df_test["OverTime"].values)).reshape(-1,1)
    PercentSalaryHikeArr=hstack((df_train["PercentSalaryHike"].values,df_test["PercentSalaryHike"].values)).reshape(-1,1)
    PerformanceRatingArr=hstack((df_train["PerformanceRating"].values,df_test["PerformanceRating"].values)).reshape(-1,1)
    RelationshipSatisfactionArr=hstack((df_train["RelationshipSatisfaction"].values,df_test["RelationshipSatisfaction"].values)).reshape(-1,1)
    StandardHoursArr=hstack((df_train["StandardHours"].values,df_test["StandardHours"].values)).reshape(-1,1)
    StockOptionLevelArr=hstack((df_train["StockOptionLevel"].values,df_test["StockOptionLevel"].values)).reshape(-1,1)
    TotalWorkingYearsArr=hstack((df_train["TotalWorkingYears"].values,df_test["TotalWorkingYears"].values)).reshape(-1,1)
    TrainingTimesLastYearArr=hstack((df_train["TrainingTimesLastYear"].values,df_test["TrainingTimesLastYear"].values)).reshape(-1,1)
    WorkLifeBalanceArr=hstack((df_train["WorkLifeBalance"].values,df_test["WorkLifeBalance"].values)).reshape(-1,1)
    YearsAtCompanyArr=hstack((df_train["YearsAtCompany"].values,df_test["YearsAtCompany"].values)).reshape(-1,1)
    YearsInCurrentRoleArr=hstack((df_train["YearsInCurrentRole"].values,df_test["YearsInCurrentRole"].values)).reshape(-1,1)
    YearsSinceLastPromotionArr=hstack((df_train["YearsSinceLastPromotion"].values,df_test["YearsSinceLastPromotion"].values)).reshape(-1,1)
    YearsWithCurrManagerArr=hstack((df_train["YearsWithCurrManager"].values,df_test["YearsWithCurrManager"].values)).reshape(-1,1)
    AgeDistanceArr=hstack((df_train["AgeDistance"].values,df_test["AgeDistance"].values)).reshape(-1,1)
    AgeEnvirArr=hstack((df_train["AgeEnvir"].values,df_test["AgeEnvir"].values)).reshape(-1,1)
    JobRoleLevelArr=hstack((df_train["JobRoleLevel"].values,df_test["JobRoleLevel"].values)).reshape(-1,1)
    OverPerArr=hstack((df_train["OverPer"].values,df_test["OverPer"].values)).reshape(-1,1)
    # InvolvementPerArr=hstack((df_train["InvolvementPer"].values,df_test["InvolvementPer"].values)).reshape(-1,1)
    # StockYearArr=hstack((df_train["StockYear"].values,df_test["StockYear"].values)).reshape(-1,1)
    AgeEnc.fit(AgeArr)
    BusinessTravelEnc.fit(BusinessTravelArr)
    DepartmentEnc.fit(DepartmentArr)
    DistanceFromHomeEnc.fit(DistanceFromHomeArr)
    EducationEnc.fit(EducationArr)
    EducationFieldEnc.fit(EducationFieldArr)
    EmployeeNumberEnc.fit(EmployeeNumberArr)
    EnvironmentSatisfactionEnc.fit(EnvironmentSatisfactionArr)
    GenderEnc.fit(GenderArr)
    JobInvolvementEnc.fit(JobInvolvementArr)
    JobLevelEnc.fit(JobLevelArr)
    JobRoleEnc.fit(JobRoleArr)
    JobSatisfactionEnc.fit(JobSatisfactionArr)
    MaritalStatusEnc.fit(MaritalStatusArr)
    MonthlyIncomeEnc.fit(MonthlyIncomeArr)
    NumCompaniesWorkedEnc.fit(NumCompaniesWorkedArr)
    # Over18Enc.fit(Over18Arr)
    OverTimeEnc.fit(OverTimeArr)
    PercentSalaryHikeEnc.fit(PercentSalaryHikeArr)
    PerformanceRatingEnc.fit(PerformanceRatingArr)
    RelationshipSatisfactionEnc.fit(RelationshipSatisfactionArr)
    StandardHoursEnc.fit(StandardHoursArr)
    StockOptionLevelEnc.fit(StockOptionLevelArr)
    TotalWorkingYearsEnc.fit(TotalWorkingYearsArr)
    TrainingTimesLastYearEnc.fit(TrainingTimesLastYearArr)
    WorkLifeBalanceEnc.fit(WorkLifeBalanceArr)
    YearsAtCompanyEnc.fit(YearsAtCompanyArr)
    YearsInCurrentRoleEnc.fit(YearsInCurrentRoleArr)
    YearsSinceLastPromotionEnc.fit(YearsSinceLastPromotionArr)
    YearsWithCurrManagerEnc.fit(YearsWithCurrManagerArr)
    AgeDistanceEnc.fit(AgeDistanceArr)
    AgeEnvirEnc.fit(AgeEnvirArr)
    JobRoleLevelEnc.fit(JobRoleLevelArr)
    OverPerEnc.fit(OverPerArr)
    # InvolvementPerEnc.fit(InvolvementPerArr)
    # StockYearEnc.fit(StockYearArr)
    EncoderList.append(AgeEnc)
    EncoderList.append(BusinessTravelEnc)
    EncoderList.append(DepartmentEnc)
    EncoderList.append(DistanceFromHomeEnc)
    EncoderList.append(EducationEnc)
    EncoderList.append(EducationFieldEnc)
    EncoderList.append(EmployeeNumberEnc)
    EncoderList.append(EnvironmentSatisfactionEnc)
    EncoderList.append(GenderEnc)
    EncoderList.append(JobInvolvementEnc)
    EncoderList.append(JobLevelEnc)
    EncoderList.append(JobRoleEnc)
    EncoderList.append(JobSatisfactionEnc)
    EncoderList.append(MaritalStatusEnc)
    EncoderList.append(MonthlyIncomeEnc)
    EncoderList.append(NumCompaniesWorkedEnc)
    # EncoderList.append(Over18Enc)
    EncoderList.append(OverTimeEnc)
    EncoderList.append(PercentSalaryHikeEnc)
    EncoderList.append(PerformanceRatingEnc)
    EncoderList.append(RelationshipSatisfactionEnc)
    EncoderList.append(StandardHoursEnc)
    EncoderList.append(StockOptionLevelEnc)
    EncoderList.append(TotalWorkingYearsEnc)
    EncoderList.append(TrainingTimesLastYearEnc)
    EncoderList.append(WorkLifeBalanceEnc)
    EncoderList.append(YearsAtCompanyEnc)
    EncoderList.append(YearsInCurrentRoleEnc)
    EncoderList.append(YearsSinceLastPromotionEnc)
    EncoderList.append(YearsWithCurrManagerEnc)
    EncoderList.append(AgeDistanceEnc)
    EncoderList.append(AgeEnvirEnc)
    EncoderList.append(JobRoleLevelEnc)
    EncoderList.append(OverPerEnc)
    # EncoderList.append(InvolvementPerEnc)
    # EncoderList.append(StockYearEnc)
    return EncoderList

def onehot_encode(df_train,df_test):
    EncoderList=initEncoderList(df_train,df_test)
    y_train=df_train["Attrition"].values
    feats=["Age","BusinessTravel","Department","DistanceFromHome","Education","EducationField","EmployeeNumber",
    "EnvironmentSatisfaction","Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","MonthlyIncome",
    "NumCompaniesWorked","OverTime","PercentSalaryHike","PerformanceRating","RelationshipSatisfaction","StandardHours",
    "StockOptionLevel","TotalWorkingYears","TrainingTimesLastYear","WorkLifeBalance","YearsAtCompany","YearsInCurrentRole",
    "YearsSinceLastPromotion","YearsWithCurrManager","AgeDistance","AgeEnvir","JobRoleLevel","OverPer"]
    for (i,feat) in enumerate(feats):
        x_train=EncoderList[i].transform(df_train[feat].values.reshape(-1,1))
        x_test=EncoderList[i].transform(df_test[feat].values.reshape(-1,1))
        if i==0:
            X_train=x_train
            X_test=x_test
        else:
            X_train=sparse.hstack((X_train,x_train))
            X_test=sparse.hstack((X_test,x_test))
    print("base data one hot over!")
    print(shape(X_train),shape(X_test))
    clf=LogisticRegression()
    clf.fit(X_train,y_train)
    # joblib.dump(clf,"lr.model")
    print("Train finish")
    y_test=clf.predict(X_test)
    submissionFile=pd.DataFrame({'result':y_test})
    submissionFile.to_csv("submission.csv",index=False)

if __name__ == '__main__':
    df_train,df_test=load_data()
    onehot_encode(df_train,df_test)